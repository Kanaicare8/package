p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation d'Hermite")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
# Affichage du graphique
print(p)
x <- seq(-2*pi, 2*pi, length.out = 10
y <- sin(x)
# Utilisation de la fonction d'interpolation d'Hermite
h <- hermite(x, y)
# Génération de points supplémentaires pour le tracé
x_plot <- seq(-2*pi, 2*pi, length.out = 400)
y_plot <- sapply(x_plot, h)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x_plot, y = y_plot)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation d'Hermite")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
# Affichage du graphique
print(p)
x <- seq(-2*pi, 2*pi, length.out = 20)
y <- sin(x)
# Utilisation de la fonction d'interpolation d'Hermite
h <- hermite(x, y)
# Génération de points supplémentaires pour le tracé
x_plot <- seq(-2*pi, 2*pi, length.out = 400)
y_plot <- sapply(x_plot, h)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x_plot, y = y_plot)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation d'Hermite")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
# Affichage du graphique
print(p)
x <- runif(min=-1,max=1,n=40)
# Génération de 40 points entre -2*pi et 2*pi
x <- runif(min=-1,max=1,n=40)
y <- sin(x)
# Utilisation de la fonction d'interpolation d'Hermite
h <- hermite(x, y)
# Génération de points supplémentaires pour le tracé
#x_plot <- seq(-2*pi, 2*pi, length.out = 400)
#y_plot <- sapply(x_plot, h)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation d'Hermite")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
# Affichage du graphique
print(p)
x <- seq(-2*pi, 2*pi, length.out = 400)
y <- sin(x)
# Utilisation de la fonction d'interpolation d'Hermite
h <- hermite(x, y)
# Génération de points supplémentaires pour le tracé
#y_plot <- sapply(x_plot, h)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation d'Hermite")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
# Affichage du graphique
print(p)
x <- seq(-2*pi, 2*pi, length.out = 20)
y <- sin(x)
# Utilisation de la fonction d'interpolation d'Hermite
h <- hermite(x, y)
# Génération de points supplémentaires pour le tracé
#y_plot <- sapply(x_plot, h)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation d'Hermite")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
# Affichage du graphique
print(p)
x <- runif(min=-1,max=1,n=40)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- exp(x)
# Utilisation de la fonction d'interpolation d'Hermite
h <- hermite(x, y)
# Génération de points supplémentaires pour le tracé
#y_plot <- sapply(x_plot, h)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation d'Hermite")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
# Affichage du graphique
print(p)
x <- seq(0, 2*pi, length.out = 20)
y <- sin(x)
h <- hermite(x, y)
n <- newton(x, y)
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot_h <- sapply(x, h)
y_plot_n <- sapply(x, n)
y_plot_l <- sapply(x, l)
# Création d'un dataframe pour ggplot
df_curve_h <- data.frame(x = x, y = y_plot_h, method = "Hermite")
df_curve_n <- data.frame(x = x, y = y_plot_n, method = "Newton")
df_curve_l <- data.frame(x = x, y = y_plot_l, method = "Lagrange")
df_curve <- rbind(df_curve_h, df_curve_n, df_curve_l)
df_points <- data.frame(x = x, y = y)
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = method)) +  # Ajout des courbes
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
scale_color_manual(values = c("red","blue","green","black"))+
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()+  # Thème minimal pour un rendu propre
ylim(-2,2)+
facet_wrap(~method)
# Affichage du graphique
print(p)
#' # Génération de 40 points entre -2*pi et 2*pi
#' # Génération de 40 points entre -2*pi et 2*pi
#' x <- runif(min=-1,max=1,n=40)
#' # Génération de 40 points entre -2*pi et 2*pi
#' x <- runif(min=-1,max=1,n=40)
#' #x <- seq(-2*pi, 2*pi, length.out = 400)
#' # Génération de 40 points entre -2*pi et 2*pi
#' x <- runif(min=-1,max=1,n=40)
#' #x <- seq(-2*pi, 2*pi, length.out = 400)
#' y <- exp(x)
#' # Génération de 40 points entre -2*pi et 2*pi
#' x <- runif(min=-1,max=1,n=40)
#' #x <- seq(-2*pi, 2*pi, length.out = 400)
#' y <- exp(x)
#' # Utilisation de la fonction d'interpolation d'Hermite
#' # Génération de 40 points entre -2*pi et 2*pi
#' x <- runif(min=-1,max=1,n=40)
#' #x <- seq(-2*pi, 2*pi, length.out = 400)
#' y <- exp(x)
#' # Utilisation de la fonction d'interpolation d'Hermite
#' h <- hermite(x, y)
#' # Génération de 40 points entre -2*pi et 2*pi
#' x <- runif(min=-1,max=1,n=40)
#' #x <- seq(-2*pi, 2*pi, length.out = 400)
#' y <- exp(x)
#' # Utilisation de la fonction d'interpolation d'Hermite
#' h <- hermite(x, y)
#' # Génération de points supplémentaires pour le tracé
#' # Génération de 40 points entre -2*pi et 2*pi
#' x <- runif(min=-1,max=1,n=40)
#' #x <- seq(-2*pi, 2*pi, length.out = 400)
#' y <- exp(x)
#' # Utilisation de la fonction d'interpolation d'Hermite
#' h <- hermite(x, y)
#' # Génération de points supplémentaires pour le tracé
#' #y_plot <- sapply(x_plot, h)
#' # Génération de 40 points entre -2*pi et 2*pi
#' x <- runif(min=-1,max=1,n=40)
#' #x <- seq(-2*pi, 2*pi, length.out = 400)
#' y <- exp(x)
#' # Utilisation de la fonction d'interpolation d'Hermite
#' h <- hermite(x, y)
#' # Génération de points supplémentaires pour le tracé
#' #y_plot <- sapply(x_plot, h)
#' # Création d'un dataframe pour ggplot
#' # Génération de 40 points entre -2*pi et 2*pi
#' x <- runif(min=-1,max=1,n=40)
#' #x <- seq(-2*pi, 2*pi, length.out = 400)
#' y <- exp(x)
#' # Utilisation de la fonction d'interpolation d'Hermite
#' h <- hermite(x, y)
#' # Génération de points supplémentaires pour le tracé
#' #y_plot <- sapply(x_plot, h)
#' # Création d'un dataframe pour ggplot
#' df_curve <- data.frame(x = x, y = y)
# Génération de 40 points entre -2*pi et 2*pi
x <- runif(min=-1,max=1,n=40)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- exp(x)
# Utilisation de la fonction d'interpolation d'Hermite
h <- hermite(x, y)
# Génération de points supplémentaires pour le tracé
#y_plot <- sapply(x_plot, h)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
# Utilisation de la fonction d'interpolation d'Hermite
n <- newton(x, y)
# Génération de points supplémentaires pour le tracé
#y_plot <- sapply(x_plot, h)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation d'Hermite")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
# Utilisation de la fonction d'interpolation d'Hermite
y <- newton(x, y)
# Génération de points supplémentaires pour le tracé
#y_plot <- sapply(x_plot, h)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- exp(x)
# Utilisation de la fonction d'interpolation d'Hermite
n <- newton(x, y)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, n)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation de newton")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- log10(x)
# Utilisation de la fonction d'interpolation d'Hermite
n <- newton(x, y)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, n)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation de newton")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, l)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
# Utilisation de la fonction d'interpolation d'Hermite
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, l)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation de newton")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
# Génération de 40 points entre -2*pi et 2*pi
x <- runif(min=-1,max=1,n=40)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- x^2
# Utilisation de la fonction d'interpolation d'Hermite
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, l)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation de newton")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- x^x
# Utilisation de la fonction d'interpolation d'Hermite
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, l)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation de newton")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
# Génération de 40 points entre -2*pi et 2*pi
x <- runif(min=-1,max=1,n=40)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- x^x
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- x^3
# Utilisation de la fonction d'interpolation d'Hermite
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, l)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation de newton")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- x^3 - 2 * x^2
# Utilisation de la fonction d'interpolation d'Hermite
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, l)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation de newton")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- x^3 - 2 * x^2 + 3
# Utilisation de la fonction d'interpolation d'Hermite
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, l)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation de newton")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- x^3 - 2 * x^2 + 1
# Utilisation de la fonction d'interpolation d'Hermite
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, l)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation de newton")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- x^3/(x-1) - 2 * x^2 + 1
# Utilisation de la fonction d'interpolation d'Hermite
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, l)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation de newton")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
#x <- seq(-2*pi, 2*pi, length.out = 400)
y <- x^3 + x^3/(x^2-1) - 2 * x^2 + 1
# Utilisation de la fonction d'interpolation d'Hermite
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot <- sapply(x_plot, l)
# Création d'un dataframe pour ggplot
df_curve <- data.frame(x = x, y = y)
df_points <- data.frame(x = x, y = y)
# Création du graphique
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = "Interpolation de newton")) +  # Ajout de la courbe
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()  # Thème minimal pour un rendu propre
#Affichage du graphique
print(p)
x <- seq(0, 2*pi, length.out = 20)
y <- x^3 + (3*x-1)/(2*x^4-x^3+1)-2
h <- hermite(x, y)
n <- newton(x, y)
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot_h <- sapply(x, h)
y_plot_n <- sapply(x, n)
y_plot_l <- sapply(x, l)
# Création d'un dataframe pour ggplot
df_curve_h <- data.frame(x = x, y = y_plot_h, method = "Hermite")
df_curve_n <- data.frame(x = x, y = y_plot_n, method = "Newton")
df_curve_l <- data.frame(x = x, y = y_plot_l, method = "Lagrange")
df_curve <- rbind(df_curve_h, df_curve_n, df_curve_l)
df_points <- data.frame(x = x, y = y)
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = method)) +  # Ajout des courbes
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
scale_color_manual(values = c("red","blue","green","black"))+
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()+  # Thème minimal pour un rendu propre
ylim(-2,2)+
facet_wrap(~method)
# Affichage du graphique
print(p)
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = method)) +  # Ajout des courbes
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
scale_color_manual(values = c("red","blue","green","black"))+
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()+  # Thème minimal pour un rendu propre
facet_wrap(~method)
# Affichage du graphique
print(p)
y <- -x^3 + (3*x-1)/(2*x^4-x^3+1)-2
h <- hermite(x, y)
n <- newton(x, y)
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot_h <- sapply(x, h)
y_plot_n <- sapply(x, n)
y_plot_l <- sapply(x, l)
# Création d'un dataframe pour ggplot
df_curve_h <- data.frame(x = x, y = y_plot_h, method = "Hermite")
df_curve_n <- data.frame(x = x, y = y_plot_n, method = "Newton")
df_curve_l <- data.frame(x = x, y = y_plot_l, method = "Lagrange")
df_curve <- rbind(df_curve_h, df_curve_n, df_curve_l)
df_points <- data.frame(x = x, y = y)
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = method)) +  # Ajout des courbes
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
scale_color_manual(values = c("red","blue","green","black"))+
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()+  # Thème minimal pour un rendu propre
facet_wrap(~method)
# Affichage du graphique
print(p)
y <- -x^3 + (3*x-1)/(2*x^4-x^3+1)+ x^2 +1
h <- hermite(x, y)
n <- newton(x, y)
l <- lagrange(x, y)
# Génération de points supplémentaires pour le tracé
y_plot_h <- sapply(x, h)
y_plot_n <- sapply(x, n)
y_plot_l <- sapply(x, l)
# Création d'un dataframe pour ggplot
df_curve_h <- data.frame(x = x, y = y_plot_h, method = "Hermite")
df_curve_n <- data.frame(x = x, y = y_plot_n, method = "Newton")
df_curve_l <- data.frame(x = x, y = y_plot_l, method = "Lagrange")
df_curve <- rbind(df_curve_h, df_curve_n, df_curve_l)
df_points <- data.frame(x = x, y = y)
p <- ggplot() +
geom_line(data = df_curve, aes(x = x, y = y, color = method)) +  # Ajout des courbes
geom_point(data = df_points, aes(x = x, y = y, color = "Points de données")) +  # Ajout des points de données
scale_color_manual(values = c("red","blue","green","black"))+
labs(color = "Légende") +  # Ajout de la légende
theme_minimal()+  # Thème minimal pour un rendu propre
facet_wrap(~method)
# Affichage du graphique
print(p)
source("~/interpol.ki/demo.R")
#' @example \Users\HP\Documents\demo.R
source("~/interpol.ki/R/docupackage.R")
#' @example demo.R
library(interpol.ki)
library(interpol.ki)
library(interpol.ki)
library(interpol.ki)
?`interpol.ki-package`
help("interpol.ki")
